// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: jwt.proto

package Jwt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JwtRpc_CreateToken_FullMethodName  = "/jwt.JwtRpc/createToken"
	JwtRpc_ParseToken_FullMethodName   = "/jwt.JwtRpc/parseToken"
	JwtRpc_IsValidToken_FullMethodName = "/jwt.JwtRpc/IsValidToken"
)

// JwtRpcClient is the client API for JwtRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JwtRpcClient interface {
	CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error)
	ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error)
	IsValidToken(ctx context.Context, in *IsValidTokenReq, opts ...grpc.CallOption) (*IsValidTokenResp, error)
}

type jwtRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewJwtRpcClient(cc grpc.ClientConnInterface) JwtRpcClient {
	return &jwtRpcClient{cc}
}

func (c *jwtRpcClient) CreateToken(ctx context.Context, in *CreateTokenReq, opts ...grpc.CallOption) (*CreateTokenResp, error) {
	out := new(CreateTokenResp)
	err := c.cc.Invoke(ctx, JwtRpc_CreateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtRpcClient) ParseToken(ctx context.Context, in *ParseTokenReq, opts ...grpc.CallOption) (*ParseTokenResp, error) {
	out := new(ParseTokenResp)
	err := c.cc.Invoke(ctx, JwtRpc_ParseToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jwtRpcClient) IsValidToken(ctx context.Context, in *IsValidTokenReq, opts ...grpc.CallOption) (*IsValidTokenResp, error) {
	out := new(IsValidTokenResp)
	err := c.cc.Invoke(ctx, JwtRpc_IsValidToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JwtRpcServer is the server API for JwtRpc service.
// All implementations must embed UnimplementedJwtRpcServer
// for forward compatibility
type JwtRpcServer interface {
	CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error)
	ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error)
	IsValidToken(context.Context, *IsValidTokenReq) (*IsValidTokenResp, error)
	mustEmbedUnimplementedJwtRpcServer()
}

// UnimplementedJwtRpcServer must be embedded to have forward compatible implementations.
type UnimplementedJwtRpcServer struct {
}

func (UnimplementedJwtRpcServer) CreateToken(context.Context, *CreateTokenReq) (*CreateTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateToken not implemented")
}
func (UnimplementedJwtRpcServer) ParseToken(context.Context, *ParseTokenReq) (*ParseTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseToken not implemented")
}
func (UnimplementedJwtRpcServer) IsValidToken(context.Context, *IsValidTokenReq) (*IsValidTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsValidToken not implemented")
}
func (UnimplementedJwtRpcServer) mustEmbedUnimplementedJwtRpcServer() {}

// UnsafeJwtRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JwtRpcServer will
// result in compilation errors.
type UnsafeJwtRpcServer interface {
	mustEmbedUnimplementedJwtRpcServer()
}

func RegisterJwtRpcServer(s grpc.ServiceRegistrar, srv JwtRpcServer) {
	s.RegisterService(&JwtRpc_ServiceDesc, srv)
}

func _JwtRpc_CreateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtRpcServer).CreateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtRpc_CreateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtRpcServer).CreateToken(ctx, req.(*CreateTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtRpc_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtRpcServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtRpc_ParseToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtRpcServer).ParseToken(ctx, req.(*ParseTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JwtRpc_IsValidToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsValidTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JwtRpcServer).IsValidToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JwtRpc_IsValidToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JwtRpcServer).IsValidToken(ctx, req.(*IsValidTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JwtRpc_ServiceDesc is the grpc.ServiceDesc for JwtRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JwtRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jwt.JwtRpc",
	HandlerType: (*JwtRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createToken",
			Handler:    _JwtRpc_CreateToken_Handler,
		},
		{
			MethodName: "parseToken",
			Handler:    _JwtRpc_ParseToken_Handler,
		},
		{
			MethodName: "IsValidToken",
			Handler:    _JwtRpc_IsValidToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jwt.proto",
}
