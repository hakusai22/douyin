// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package userrpc

import (
	"context"

	"douyin/v2/user/app/rpc/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FollowActionReq  = user.FollowActionReq
	FollowActionResp = user.FollowActionResp
	FollowListReq    = user.FollowListReq
	FollowListResp   = user.FollowListResp
	FollowerListReq  = user.FollowerListReq
	FollowerListResp = user.FollowerListResp
	GetUserReq       = user.GetUserReq
	GetUserResp      = user.GetUserResp
	LoginReq         = user.LoginReq
	LoginResp        = user.LoginResp
	RegisterReq      = user.RegisterReq
	RegisterResp     = user.RegisterResp
	User             = user.User

	UserRpc interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
		FollowAction(ctx context.Context, in *FollowActionReq, opts ...grpc.CallOption) (*FollowActionResp, error)
		FollowList(ctx context.Context, in *FollowListReq, opts ...grpc.CallOption) (*FollowListResp, error)
		FollowerList(ctx context.Context, in *FollowerListReq, opts ...grpc.CallOption) (*FollowerListResp, error)
	}

	defaultUserRpc struct {
		cli zrpc.Client
	}
)

func NewUserRpc(cli zrpc.Client) UserRpc {
	return &defaultUserRpc{
		cli: cli,
	}
}

func (m *defaultUserRpc) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUserRpc) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserRpc) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.GetUser(ctx, in, opts...)
}

func (m *defaultUserRpc) FollowAction(ctx context.Context, in *FollowActionReq, opts ...grpc.CallOption) (*FollowActionResp, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.FollowAction(ctx, in, opts...)
}

func (m *defaultUserRpc) FollowList(ctx context.Context, in *FollowListReq, opts ...grpc.CallOption) (*FollowListResp, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.FollowList(ctx, in, opts...)
}

func (m *defaultUserRpc) FollowerList(ctx context.Context, in *FollowerListReq, opts ...grpc.CallOption) (*FollowerListResp, error) {
	client := user.NewUserRpcClient(m.cli.Conn())
	return client.FollowerList(ctx, in, opts...)
}
