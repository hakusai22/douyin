// Code generated by goctl. DO NOT EDIT.
// Source: video.proto

package videorpc

import (
	"context"

	"douyin/v2/video/app/rpc/video"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Comment          = video.Comment
	CommentListReq   = video.CommentListReq
	CommentListResp  = video.CommentListResp
	CommentReq       = video.CommentReq
	CommentResp      = video.CommentResp
	FavoriteListReq  = video.FavoriteListReq
	FavoriteListResp = video.FavoriteListResp
	FavoriteReq      = video.FavoriteReq
	FavoriteResp     = video.FavoriteResp
	FeedReq          = video.FeedReq
	FeedResp         = video.FeedResp
	PublishListReq   = video.PublishListReq
	PublishListResp  = video.PublishListResp
	User             = video.User
	Video            = video.Video

	VideoRpc interface {
		GetPublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error)
		GetFeed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error)
		CommentAction(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentResp, error)
		GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error)
		FavoriteAction(ctx context.Context, in *FavoriteReq, opts ...grpc.CallOption) (*FavoriteResp, error)
		GetFavoriteList(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error)
	}

	defaultVideoRpc struct {
		cli zrpc.Client
	}
)

func NewVideoRpc(cli zrpc.Client) VideoRpc {
	return &defaultVideoRpc{
		cli: cli,
	}
}

func (m *defaultVideoRpc) GetPublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error) {
	client := video.NewVideoRpcClient(m.cli.Conn())
	return client.GetPublishList(ctx, in, opts...)
}

func (m *defaultVideoRpc) GetFeed(ctx context.Context, in *FeedReq, opts ...grpc.CallOption) (*FeedResp, error) {
	client := video.NewVideoRpcClient(m.cli.Conn())
	return client.GetFeed(ctx, in, opts...)
}

func (m *defaultVideoRpc) CommentAction(ctx context.Context, in *CommentReq, opts ...grpc.CallOption) (*CommentResp, error) {
	client := video.NewVideoRpcClient(m.cli.Conn())
	return client.CommentAction(ctx, in, opts...)
}

func (m *defaultVideoRpc) GetCommentList(ctx context.Context, in *CommentListReq, opts ...grpc.CallOption) (*CommentListResp, error) {
	client := video.NewVideoRpcClient(m.cli.Conn())
	return client.GetCommentList(ctx, in, opts...)
}

func (m *defaultVideoRpc) FavoriteAction(ctx context.Context, in *FavoriteReq, opts ...grpc.CallOption) (*FavoriteResp, error) {
	client := video.NewVideoRpcClient(m.cli.Conn())
	return client.FavoriteAction(ctx, in, opts...)
}

func (m *defaultVideoRpc) GetFavoriteList(ctx context.Context, in *FavoriteListReq, opts ...grpc.CallOption) (*FavoriteListResp, error) {
	client := video.NewVideoRpcClient(m.cli.Conn())
	return client.GetFavoriteList(ctx, in, opts...)
}
